{"cmd": "\nimport numpy as np\nfrom io import StringIO # To read the string data as a file\n\nhistorical_weather_df = pd.read_csv(\"04_05_25.csv\")\n\n# Rename columns for consistency and ease of use \nrename_map = {\n    \"datetime (UTC)\": \"timestamp_utc\",\n    \"coordinates (lat,lon)\": \"coordinates_lat_lon\",\n    \"model (name)\": \"model_name\",\n    \"model elevation (surface)\": \"model_elevation_m\",\n    \"utc_offset (hrs)\": \"utc_offset_hrs\",\n    \"temperature (degC)\": \"temp_c\",\n    \"relative_humidity (0-1)\": \"relative_humidity\",\n    \"wind_speed (m/s)\": \"wind_speed_mps\",\n    \"wind_direction (deg)\": \"wind_deg\",\n    \"10m_wind_gust (m/s)\": \"wind_gust_mps\",\n    \"total_cloud_cover (0-1)\": \"cloud_cover\", \n    \"total_precipitation (mm of water equivalent)\": \"precip_mm\"\n}\nhistorical_weather_df.rename(columns=rename_map, inplace=True)\n\n# Convert timestamp_utc to datetime objects and set timezone\nhistorical_weather_df['timestamp_utc'] = pd.to_datetime(historical_weather_df['timestamp_utc'], utc=True)\n\n# Handle missing values (example: forward fill, then backward fill for any remaining at the start)\nnumeric_cols = historical_weather_df.select_dtypes(include=np.number).columns\nfor col in numeric_cols:\n    if historical_weather_df[col].isnull().any():\n        historical_weather_df[col] = historical_weather_df[col].ffill().bfill()\n\n# Cyclical Time Features\nif 'timestamp_utc' in historical_weather_df.columns:\n    dt_col = historical_weather_df['timestamp_utc']\n    historical_weather_df['hour_of_day'] = dt_col.dt.hour\n    historical_weather_df['day_of_week'] = dt_col.dt.dayofweek  # Monday=0, Sunday=6\n    historical_weather_df['day_of_year'] = dt_col.dt.dayofyear\n    historical_weather_df['month_of_year'] = dt_col.dt.month\n    historical_weather_df['year'] = dt_col.dt.year # Useful for partitioning or long-term trends\n\n    # Sin/Cos transformations\n    historical_weather_df['hour_sin'] = np.sin(2 * np.pi * historical_weather_df['hour_of_day'] / 24)\n    historical_weather_df['hour_cos'] = np.cos(2 * np.pi * historical_weather_df['hour_of_day'] / 24)\n    \n    historical_weather_df['day_of_week_sin'] = np.sin(2 * np.pi * historical_weather_df['day_of_week'] / 7)\n    historical_weather_df['day_of_week_cos'] = np.cos(2 * np.pi * historical_weather_df['day_of_week'] / 7)\n    \n    # For month, it's 1-12\n    historical_weather_df['month_sin'] = np.sin(2 * np.pi * (historical_weather_df['month_of_year'] -1) / 12) # Adjust to 0-11 range for proper cycle\n    historical_weather_df['month_cos'] = np.cos(2 * np.pi * (historical_weather_df['month_of_year'] -1) / 12)\n\n    # Day of year \n    historical_weather_df['day_of_year_sin'] = np.sin(2 * np.pi * (historical_weather_df['day_of_year']-1) / 365.25)\n    historical_weather_df['day_of_year_cos'] = np.cos(2 * np.pi * (historical_weather_df['day_of_year']-1) / 365.25)\nelse:\n    print(\"Warning: 'timestamp_utc' column not found. Cannot create cyclical features.\")\n\n\n", "cmd_opts": " --cell_id=NCoy1MT9FW -s", "import_complete": 1, "terminal": "nvimterm"}